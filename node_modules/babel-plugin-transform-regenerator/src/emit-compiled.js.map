{"version":3,"sources":["emit.js"],"names":[],"mappings":"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","file":"emit-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nimport assert from \"assert\";\nimport * as t from \"babel-types\";\nimport * as leap from \"./leap\";\nimport * as meta from \"./meta\";\nimport * as util from \"./util\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  assert.ok(this instanceof Emitter);\n  t.assertIdentifier(contextId);\n\n  // Used to generate unique temporary names.\n  this.nextTempId = 0;\n\n  // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n  this.contextId = contextId;\n\n  // An append-only list of Statements that grows each time this.emit is\n  // called.\n  this.listing = [];\n\n  // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n  this.marked = [true];\n\n  // The last location will be marked when this.getDispatchLoop is\n  // called.\n  this.finalLoc = loc();\n\n  // A list of all leap.TryEntry statements emitted.\n  this.tryEntries = [];\n\n  // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n  this.leapManager = new leap.LeapManager(this);\n}\n\nlet Ep = Emitter.prototype;\nexports.Emitter = Emitter;\n\n// Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\nfunction loc() {\n  return t.numericLiteral(-1);\n}\n\n// Sets the exact value of the given location to the offset of the next\n// Statement emitted.\nEp.mark = function(loc) {\n  t.assertLiteral(loc);\n  let index = this.listing.length;\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    assert.strictEqual(loc.value, index);\n  }\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function(node) {\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n};\n\n// Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\nEp.emitAssign = function(lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n};\n\n// Shorthand for an assignment statement.\nEp.assign = function(lhs, rhs) {\n  return t.expressionStatement(\n    t.assignmentExpression(\"=\", lhs, rhs));\n};\n\n// Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\nEp.contextProperty = function(name, computed) {\n  return t.memberExpression(\n    this.contextId,\n    computed ? t.stringLiteral(name) : t.identifier(name),\n    !!computed\n  );\n};\n\n// Shorthand for setting context.rval and jumping to `context.stop()`.\nEp.stop = function(rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function(valuePath) {\n  t.assertExpression(valuePath.value);\n\n  this.emitAssign(\n    this.contextProperty(\"rval\"),\n    this.explodeExpression(valuePath)\n  );\n};\n\nEp.clearPendingException = function(tryLoc, assignee) {\n  t.assertLiteral(tryLoc);\n\n  let catchCall = t.callExpression(\n    this.contextProperty(\"catch\", true),\n    [tryLoc]\n  );\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n};\n\n// Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\nEp.jump = function(toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(t.breakStatement());\n};\n\n// Conditional jump.\nEp.jumpIf = function(test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  this.emit(t.ifStatement(\n    test,\n    t.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      t.breakStatement()\n    ])\n  ));\n};\n\n// Conditional jump, with the condition negated.\nEp.jumpIfNot = function(test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  let negatedTest;\n  if (t.isUnaryExpression(test) &&\n      test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(\n    negatedTest,\n    t.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      t.breakStatement()\n    ])\n  ));\n};\n\n// Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\nEp.makeTempVar = function() {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function(id) {\n  return t.functionExpression(\n    id || null/*Anonymous*/,\n    [this.contextId],\n    t.blockStatement([this.getDispatchLoop()]),\n    false, // Not a generator anymore!\n    false // Nor an expression.\n  );\n};\n\n// Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\nEp.getDispatchLoop = function() {\n  let self = this;\n  let cases = [];\n  let current;\n\n  // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n  let alreadyEnded = false;\n\n  self.listing.forEach(function(stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(\n        t.numericLiteral(i),\n        current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt))\n        alreadyEnded = true;\n    }\n  });\n\n  // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n  this.finalLoc.value = this.listing.length;\n\n  cases.push(\n    t.switchCase(this.finalLoc, [\n      // Intentionally fall through to the \"end\" case...\n    ]),\n\n    // So that the runtime can jump to the final location without having\n    // to know its offset, we provide the \"end\" case as a synonym.\n    t.switchCase(t.stringLiteral(\"end\"), [\n      // This will check/clear both context.thrown and context.rval.\n      t.returnStatement(\n        t.callExpression(this.contextProperty(\"stop\"), [])\n      )\n    ])\n  );\n\n  return t.whileStatement(\n    t.numericLiteral(1),\n    t.switchStatement(\n      t.assignmentExpression(\n        \"=\",\n        this.contextProperty(\"prev\"),\n        this.contextProperty(\"next\")\n      ),\n      cases\n    )\n  );\n};\n\nEp.getTryLocsList = function() {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  let lastLocValue = 0;\n\n  return t.arrayExpression(\n    this.tryEntries.map(function(tryEntry) {\n      let thisLocValue = tryEntry.firstLoc.value;\n      assert.ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n      lastLocValue = thisLocValue;\n\n      let ce = tryEntry.catchEntry;\n      let fe = tryEntry.finallyEntry;\n\n      let locs = [\n        tryEntry.firstLoc,\n        // The null here makes a hole in the array.\n        ce ? ce.firstLoc : null\n      ];\n\n      if (fe) {\n        locs[2] = fe.firstLoc;\n        locs[3] = fe.afterLoc;\n      }\n\n      return t.arrayExpression(locs);\n    })\n  );\n};\n\n// All side effects must be realized in order.\n\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n\n// No destructive modification of AST nodes.\n\nEp.explode = function(path, ignoreResult) {\n  let node = path.node;\n  let self = this;\n\n  t.assertNode(node);\n\n  if (t.isDeclaration(node))\n    throw getDeclError(node);\n\n  if (t.isStatement(node))\n    return self.explodeStatement(path);\n\n  if (t.isExpression(node))\n    return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n  case \"Program\":\n    return path.get(\"body\").map(\n      self.explodeStatement,\n      self\n    );\n\n  case \"VariableDeclarator\":\n    throw getDeclError(node);\n\n  // These node types should be handled by their parent nodes\n  // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n  case \"Property\":\n  case \"SwitchCase\":\n  case \"CatchClause\":\n    throw new Error(\n      node.type + \" nodes should be handled by their parents\");\n\n  default:\n    throw new Error(\n      \"unknown Node of type \" +\n        JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\n    \"all declarations should have been transformed into \" +\n    \"assignments before the Exploder began its work: \" +\n    JSON.stringify(node));\n}\n\nEp.explodeStatement = function(path, labelId) {\n  let stmt = path.node;\n  let self = this;\n  let before, after, head;\n\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  }\n\n  // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n  case \"ExpressionStatement\":\n    self.explodeExpression(path.get(\"expression\"), true);\n    break;\n\n  case \"LabeledStatement\":\n    after = loc();\n\n    // Did you know you can break from any labeled block statement or\n    // control structure? Well, you can! Note: when a labeled loop is\n    // encountered, the leap.LabeledEntry created here will immediately\n    // enclose a leap.LoopEntry on the leap manager's stack, and both\n    // entries will have the same label. Though this works just fine, it\n    // may seem a bit redundant. In theory, we could check here to\n    // determine if stmt knows how to handle its own label; for example,\n    // stmt happens to be a WhileStatement and so we know it's going to\n    // establish its own LoopEntry when we explode it (below). Then this\n    // LabeledEntry would be unnecessary. Alternatively, we might be\n    // tempted not to pass stmt.label down into self.explodeStatement,\n    // because we've handled the label here, but that's a mistake because\n    // labeled loops may contain labeled continue statements, which is not\n    // something we can handle in this generic case. All in all, I think a\n    // little redundancy greatly simplifies the logic of this case, since\n    // it's clear that we handle all possible LabeledStatements correctly\n    // here, regardless of whether they interact with the leap manager\n    // themselves. Also remember that labels and break/continue-to-label\n    // statements are rare, and all of this logic happens at transform\n    // time, so it has no additional runtime cost.\n    self.leapManager.withEntry(\n      new leap.LabeledEntry(after, stmt.label),\n      function() {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      }\n    );\n\n    self.mark(after);\n\n    break;\n\n  case \"WhileStatement\":\n    before = loc();\n    after = loc();\n\n    self.mark(before);\n    self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, before, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n    self.jump(before);\n    self.mark(after);\n\n    break;\n\n  case \"DoWhileStatement\":\n    let first = loc();\n    let test = loc();\n    after = loc();\n\n    self.mark(first);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, test, labelId),\n      function() { self.explode(path.get(\"body\")); }\n    );\n    self.mark(test);\n    self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n    self.mark(after);\n\n    break;\n\n  case \"ForStatement\":\n    head = loc();\n    let update = loc();\n    after = loc();\n\n    if (stmt.init) {\n      // We pass true here to indicate that if stmt.init is an expression\n      // then we do not care about its result.\n      self.explode(path.get(\"init\"), true);\n    }\n\n    self.mark(head);\n\n    if (stmt.test) {\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    } else {\n      // No test means continue unconditionally.\n    }\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, update, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.mark(update);\n\n    if (stmt.update) {\n      // We pass true here to indicate that if stmt.update is an\n      // expression then we do not care about its result.\n      self.explode(path.get(\"update\"), true);\n    }\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"TypeCastExpression\":\n    return self.explodeExpression(path.get(\"expression\"));\n\n  case \"ForInStatement\":\n    head = loc();\n    after = loc();\n\n    let keyIterNextFn = self.makeTempVar();\n    self.emitAssign(\n      keyIterNextFn,\n      t.callExpression(\n        util.runtimeProperty(\"keys\"),\n        [self.explodeExpression(path.get(\"right\"))]\n      )\n    );\n\n    self.mark(head);\n\n    let keyInfoTmpVar = self.makeTempVar();\n    self.jumpIf(\n      t.memberExpression(\n        t.assignmentExpression(\n          \"=\",\n          keyInfoTmpVar,\n          t.callExpression(keyIterNextFn, [])\n        ),\n        t.identifier(\"done\"),\n        false\n      ),\n      after\n    );\n\n    self.emitAssign(\n      stmt.left,\n      t.memberExpression(\n        keyInfoTmpVar,\n        t.identifier(\"value\"),\n        false\n      )\n    );\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, head, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"BreakStatement\":\n    self.emitAbruptCompletion({\n      type: \"break\",\n      target: self.leapManager.getBreakLoc(stmt.label)\n    });\n\n    break;\n\n  case \"ContinueStatement\":\n    self.emitAbruptCompletion({\n      type: \"continue\",\n      target: self.leapManager.getContinueLoc(stmt.label)\n    });\n\n    break;\n\n  case \"SwitchStatement\":\n    // Always save the discriminant into a temporary variable in case the\n    // test expressions overwrite values like context.sent.\n    let disc = self.emitAssign(\n      self.makeTempVar(),\n      self.explodeExpression(path.get(\"discriminant\"))\n    );\n\n    after = loc();\n    let defaultLoc = loc();\n    let condition = defaultLoc;\n    let caseLocs = [];\n\n    // If there are no cases, .cases might be undefined.\n    let cases = stmt.cases || [];\n\n    for (let i = cases.length - 1; i >= 0; --i) {\n      let c = cases[i];\n      t.assertSwitchCase(c);\n\n      if (c.test) {\n        condition = t.conditionalExpression(\n          t.binaryExpression(\"===\", disc, c.test),\n          caseLocs[i] = loc(),\n          condition\n        );\n      } else {\n        caseLocs[i] = defaultLoc;\n      }\n    }\n\n    let discriminant = path.get(\"discriminant\");\n    discriminant.replaceWith(condition);\n    self.jump(self.explodeExpression(discriminant));\n\n    self.leapManager.withEntry(\n      new leap.SwitchEntry(after),\n      function() {\n        path.get(\"cases\").forEach(function(casePath) {\n          let i = casePath.key;\n          self.mark(caseLocs[i]);\n\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      }\n    );\n\n    self.mark(after);\n    if (defaultLoc.value === -1) {\n      self.mark(defaultLoc);\n      assert.strictEqual(after.value, defaultLoc.value);\n    }\n\n    break;\n\n  case \"IfStatement\":\n    let elseLoc = stmt.alternate && loc();\n    after = loc();\n\n    self.jumpIfNot(\n      self.explodeExpression(path.get(\"test\")),\n      elseLoc || after\n    );\n\n    self.explodeStatement(path.get(\"consequent\"));\n\n    if (elseLoc) {\n      self.jump(after);\n      self.mark(elseLoc);\n      self.explodeStatement(path.get(\"alternate\"));\n    }\n\n    self.mark(after);\n\n    break;\n\n  case \"ReturnStatement\":\n    self.emitAbruptCompletion({\n      type: \"return\",\n      value: self.explodeExpression(path.get(\"argument\"))\n    });\n\n    break;\n\n  case \"WithStatement\":\n    throw new Error(\"WithStatement not supported in generator functions.\");\n\n  case \"TryStatement\":\n    after = loc();\n\n    let handler = stmt.handler;\n\n    let catchLoc = handler && loc();\n    let catchEntry = catchLoc && new leap.CatchEntry(\n      catchLoc,\n      handler.param\n    );\n\n    let finallyLoc = stmt.finalizer && loc();\n    let finallyEntry = finallyLoc &&\n      new leap.FinallyEntry(finallyLoc, after);\n\n    let tryEntry = new leap.TryEntry(\n      self.getUnmarkedCurrentLoc(),\n      catchEntry,\n      finallyEntry\n    );\n\n    self.tryEntries.push(tryEntry);\n    self.updateContextPrevLoc(tryEntry.firstLoc);\n\n    self.leapManager.withEntry(tryEntry, function() {\n      self.explodeStatement(path.get(\"block\"));\n\n      if (catchLoc) {\n        if (finallyLoc) {\n          // If we have both a catch block and a finally block, then\n          // because we emit the catch block first, we need to jump over\n          // it to the finally block.\n          self.jump(finallyLoc);\n\n        } else {\n          // If there is no finally block, then we need to jump over the\n          // catch block to the fall-through location.\n          self.jump(after);\n        }\n\n        self.updateContextPrevLoc(self.mark(catchLoc));\n\n        let bodyPath = path.get(\"handler.body\");\n        let safeParam = self.makeTempVar();\n        self.clearPendingException(tryEntry.firstLoc, safeParam);\n\n        bodyPath.traverse(catchParamVisitor, {\n          safeParam: safeParam,\n          catchParamName: handler.param.name\n        });\n\n        self.leapManager.withEntry(catchEntry, function() {\n          self.explodeStatement(bodyPath);\n        });\n      }\n\n      if (finallyLoc) {\n        self.updateContextPrevLoc(self.mark(finallyLoc));\n\n        self.leapManager.withEntry(finallyEntry, function() {\n          self.explodeStatement(path.get(\"finalizer\"));\n        });\n\n        self.emit(t.returnStatement(t.callExpression(\n          self.contextProperty(\"finish\"),\n          [finallyEntry.firstLoc]\n        )));\n      }\n    });\n\n    self.mark(after);\n\n    break;\n\n  case \"ThrowStatement\":\n    self.emit(t.throwStatement(\n      self.explodeExpression(path.get(\"argument\"))\n    ));\n\n    break;\n\n  default:\n    throw new Error(\n      \"unknown Statement of type \" +\n        JSON.stringify(stmt.type));\n  }\n};\n\nlet catchParamVisitor = {\n  Identifier: function(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      path.replaceWith(state.safeParam);\n    }\n  },\n\n  Scope: function(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function(record) {\n  if (!isValidCompletion(record)) {\n    assert.ok(\n      false,\n      \"invalid completion record: \" +\n        JSON.stringify(record)\n    );\n  }\n\n  assert.notStrictEqual(\n    record.type, \"normal\",\n    \"normal completions are not abrupt\"\n  );\n\n  let abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" ||\n      record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = record.target;\n  } else if (record.type === \"return\" ||\n             record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = record.value;\n    }\n  }\n\n  this.emit(\n    t.returnStatement(\n      t.callExpression(\n        this.contextProperty(\"abrupt\"),\n        abruptArgs\n      )\n    )\n  );\n};\n\nfunction isValidCompletion(record) {\n  let type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" ||\n      type === \"continue\") {\n    return !hasOwn.call(record, \"value\")\n        && t.isLiteral(record.target);\n  }\n\n  if (type === \"return\" ||\n      type === \"throw\") {\n    return hasOwn.call(record, \"value\")\n        && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n}\n\n\n// Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\nEp.getUnmarkedCurrentLoc = function() {\n  return t.numericLiteral(this.listing.length);\n};\n\n// The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\nEp.updateContextPrevLoc = function(loc) {\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      assert.strictEqual(loc.value, this.listing.length);\n    }\n\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  }\n\n  // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function(path, ignoreResult) {\n  let expr = path.node;\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  let self = this;\n  let result; // Used optionally by several cases below.\n  let after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  }\n\n  // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  }\n\n  // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n  let hasLeapingChildren = meta.containsLeap.onlyChildren(expr);\n\n  // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    assert.ok(\n      !ignoreChildResult || !tempVar,\n      \"Ignoring the result of a child expression but forcing it to \" +\n        \"be assigned to a temporary variable?\"\n    );\n\n    let result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {\n      // Side effects already emitted above.\n\n    } else if (tempVar || (hasLeapingChildren &&\n                           !t.isLiteral(result))) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(\n        tempVar || self.makeTempVar(),\n        result\n      );\n    }\n    return result;\n  }\n\n  // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n  case \"MemberExpression\":\n    return finish(t.memberExpression(\n      self.explodeExpression(path.get(\"object\")),\n      expr.computed\n        ? explodeViaTempVar(null, path.get(\"property\"))\n        : expr.property,\n      expr.computed\n    ));\n\n  case \"CallExpression\":\n    let calleePath = path.get(\"callee\");\n    let argsPath = path.get(\"arguments\");\n\n    let newCallee;\n    let newArgs = [];\n\n    let hasLeapingArgs = false;\n    argsPath.forEach(function(argPath) {\n      hasLeapingArgs = hasLeapingArgs ||\n        meta.containsLeap(argPath.node);\n    });\n\n    if (t.isMemberExpression(calleePath.node)) {\n      if (hasLeapingArgs) {\n        // If the arguments of the CallExpression contained any yield\n        // expressions, then we need to be sure to evaluate the callee\n        // before evaluating the arguments, but if the callee was a member\n        // expression, then we must be careful that the object of the\n        // member expression still gets bound to `this` for the call.\n\n        let newObject = explodeViaTempVar(\n          // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(),\n          calleePath.get(\"object\")\n        );\n\n        let newProperty = calleePath.node.computed\n          ? explodeViaTempVar(null, calleePath.get(\"property\"))\n          : calleePath.node.property;\n\n        newArgs.unshift(newObject);\n\n        newCallee = t.memberExpression(\n          t.memberExpression(\n            newObject,\n            newProperty,\n            calleePath.node.computed\n          ),\n          t.identifier(\"call\"),\n          false\n        );\n\n      } else {\n        newCallee = self.explodeExpression(calleePath);\n      }\n\n    } else {\n      newCallee = self.explodeExpression(calleePath);\n\n      if (t.isMemberExpression(newCallee)) {\n        // If the callee was not previously a MemberExpression, then the\n        // CallExpression was \"unqualified,\" meaning its `this` object\n        // should be the global object. If the exploded expression has\n        // become a MemberExpression (e.g. a context property, probably a\n        // temporary variable), then we need to force it to be unqualified\n        // by using the (0, object.property)(...) trick; otherwise, it\n        // will receive the object of the MemberExpression as its `this`\n        // object.\n        newCallee = t.sequenceExpression([\n          t.numericLiteral(0),\n          newCallee\n        ]);\n      }\n    }\n\n    argsPath.forEach(function(argPath) {\n      newArgs.push(explodeViaTempVar(null, argPath));\n    });\n\n    return finish(t.callExpression(\n      newCallee,\n      newArgs\n    ));\n\n  case \"NewExpression\":\n    return finish(t.newExpression(\n      explodeViaTempVar(null, path.get(\"callee\")),\n      path.get(\"arguments\").map(function(argPath) {\n        return explodeViaTempVar(null, argPath);\n      })\n    ));\n\n  case \"ObjectExpression\":\n    return finish(t.objectExpression(\n      path.get(\"properties\").map(function(propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(\n            propPath.node.key,\n            explodeViaTempVar(null, propPath.get(\"value\")),\n            propPath.node.computed\n          );\n        } else {\n          return propPath.node;\n        }\n      })\n    ));\n\n  case \"ArrayExpression\":\n    return finish(t.arrayExpression(\n      path.get(\"elements\").map(function(elemPath) {\n        return explodeViaTempVar(null, elemPath);\n      })\n    ));\n\n  case \"SequenceExpression\":\n    let lastIndex = expr.expressions.length - 1;\n\n    path.get(\"expressions\").forEach(function(exprPath) {\n      if (exprPath.key === lastIndex) {\n        result = self.explodeExpression(exprPath, ignoreResult);\n      } else {\n        self.explodeExpression(exprPath, true);\n      }\n    });\n\n    return result;\n\n  case \"LogicalExpression\":\n    after = loc();\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    let left = explodeViaTempVar(result, path.get(\"left\"));\n\n    if (expr.operator === \"&&\") {\n      self.jumpIfNot(left, after);\n    } else {\n      assert.strictEqual(expr.operator, \"||\");\n      self.jumpIf(left, after);\n    }\n\n    explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"ConditionalExpression\":\n    let elseLoc = loc();\n    after = loc();\n    let test = self.explodeExpression(path.get(\"test\"));\n\n    self.jumpIfNot(test, elseLoc);\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n    self.jump(after);\n\n    self.mark(elseLoc);\n    explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"UnaryExpression\":\n    return finish(t.unaryExpression(\n      expr.operator,\n      // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")),\n      !!expr.prefix\n    ));\n\n  case \"BinaryExpression\":\n    return finish(t.binaryExpression(\n      expr.operator,\n      explodeViaTempVar(null, path.get(\"left\")),\n      explodeViaTempVar(null, path.get(\"right\"))\n    ));\n\n  case \"AssignmentExpression\":\n    return finish(t.assignmentExpression(\n      expr.operator,\n      self.explodeExpression(path.get(\"left\")),\n      self.explodeExpression(path.get(\"right\"))\n    ));\n\n  case \"UpdateExpression\":\n    return finish(t.updateExpression(\n      expr.operator,\n      self.explodeExpression(path.get(\"argument\")),\n      expr.prefix\n    ));\n\n  case \"YieldExpression\":\n    after = loc();\n    let arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n    if (arg && expr.delegate) {\n      let result = self.makeTempVar();\n\n      self.emit(t.returnStatement(t.callExpression(\n        self.contextProperty(\"delegateYield\"), [\n          arg,\n          t.stringLiteral(result.property.name),\n          after\n        ]\n      )));\n\n      self.mark(after);\n\n      return result;\n    }\n\n    self.emitAssign(self.contextProperty(\"next\"), after);\n    self.emit(t.returnStatement(arg || null));\n    self.mark(after);\n\n    return self.contextProperty(\"sent\");\n\n  default:\n    throw new Error(\n      \"unknown Expression of type \" +\n        JSON.stringify(expr.type));\n  }\n};\n"]}